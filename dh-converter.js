// Generated by CoffeeScript 1.11.1
(function() {
  window.DH_converter = window.DH_converter || {};

  window.Robot_Maker = (function() {
    function Robot_Maker(table1) {
      this.table = table1;
      this.parser = new DOMParser();
      this.robot_dom = this.parser.parseFromString(this.robot_xml, "text/xml");
      this.urdf = this.convert_text_table(this.table);
    }

    Robot_Maker.prototype.robot_xml = "<robot name='example_robot'> <link name='link0_passive'><visual> <material name='blue'><color rgba='0 0 .8 1'/></material> <geometry> <origin xyz='0 0 0' rpy='0 0 0'/> <cylinder length='0.6' radius='0.1'/></geometry></visual></link> <link name='link0_x_axis'><visual> <material name='red'><color rgba='1 0 0 1'/></material> <geometry> <origin xyz='0 0 0' rpy='0 0 0'/> <cylinder length='0.6' radius='0.1'/></geometry></visual></link> <joint name='q0_x' type='fixed'> <origin xyz='0 0 0' rpy='0 1.571 0'/> <parent link='link0_passive' /> <child link='link0_x_axis' /> </joint> </robot> ";

    Robot_Maker.prototype.row_template_insert = "<link name='link{{name}}'></link> <link name='link{{name}}_passive'><visual> <origin xyz='0 0 0.25' rpy='0 0 0'/><material name='blue' /><geometry><cylinder length='0.5' radius='0.05'/></geometry></visual></link> <link name='link{{name}}_x_axis'><visual><origin xyz='0 0 0.25' rpy='0 0 0'/> <material name='red' /><geometry><cylinder length='0.5' radius='0.05'/></geometry></visual></link> <joint name='q{{name}}' type='{{type}}'> <origin xyz='0 0 {{d}}' rpy='0 0 {{th}}'/> <parent link='link{{previous_name}}_passive' /> <child link='link{{name}}' /> <axis xyz='0 0 1'/> </joint> <joint name='q{{row_no}}_passive' type='fixed'> <origin xyz='{{a}} 0 0' rpy='{{alpha}} 0 0'/> <parent link='link{{name}}' /> <child link='link{{name}}_passive' /> </joint> <joint name='q{{row_no}}_x' type='fixed'> <origin xyz='0 0 0' rpy='0 1.571 0'/> <parent link='link{{name}}_passive' /> <child link='link{{name}}_x_axis' /> </joint>";

    Robot_Maker.prototype.convert_text_table = function(table) {

      /* function converts markdown table into nodes, we assume that table has header (two lines)
       */
      var i, line_no, lines_of_text, pattern, przerob_linijke, ref, regg, robot_dict, sam_robot, wynik;
      pattern = /\|\W*?([-+]?[0-9]*\.?[0-9]+)\W*?\|\W*?([-+]?[0-9]*\.?[0-9]+)\W*?\|\W*?([-+]?[0-9]*\.?[0-9]+)\W*?\|\W*?([-+]?[0-9]*\.?[0-9]+)\W*?\|\W*?(\w+?)\W*?\|/;
      regg = new RegExp(pattern);
      lines_of_text = table.split('\n');
      robot_dict = {};
      sam_robot = this.robot_dom.getElementsByTagName("robot")[0];
      for (line_no = i = 2, ref = lines_of_text.length; 2 <= ref ? i < ref : i > ref; line_no = 2 <= ref ? ++i : --i) {
        robot_dict.row_no = line_no - 1;
        przerob_linijke = lines_of_text[line_no].match(regg);
        robot_dict.th = przerob_linijke[1];
        robot_dict.d = przerob_linijke[2];
        robot_dict.a = przerob_linijke[3];
        robot_dict.alpha = przerob_linijke[4];
        robot_dict.R = przerob_linijke[5] === "true";
        wynik = this.DH_row_to_links(robot_dict);
        sam_robot.insertAdjacentHTML('beforeend', wynik);
      }
      console.log(sam_robot);
      return vkbeautify.xml(sam_robot.outerHTML);
    };

    Robot_Maker.prototype.DH_row_to_links = function(row_dict) {

      /* function gets a dictionary representing row in DH table, returns xml node
       */
      var row_no, row_xml;
      row_no = row_dict.row_no;
      row_dict.name = row_no;
      row_dict.previous_name = row_no - 1;
      if (row_dict.R) {
        row_dict.type = "revolute";
      } else {
        row_dict.type = "prismatic";
      }
      row_xml = Mustache.render(this.row_template_insert, row_dict);
      return row_xml;
    };

    return Robot_Maker;

  })();

}).call(this);
